##2nd feature set

import numpy as np
import cv2
import matplotlib.pyplot as plt
import pandas as pd
from google.colab.patches import cv2_imshow


df=pd.DataFrame()
img=cv2.imread('mdb001.pgm')
img=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
img2=img.reshape(-1)
df["pix. values"]=img2       #first feature pix. no.

ksize=5


num=1
for theta in range(2):
  theta=theta/4 *np.pi
  for sigma in (3,5):
    for lamda in np.arange(0,np.pi,np.pi/4):
      for gamma in (0.05,0.5):
        Gabor_label='Gabor'+str(num)
        kernel=cv2.getGaborKernel((ksize,ksize),sigma,theta,lamda,gamma,0,ktype=cv2.CV_32F) #2nd feature set
        fimg=cv2.filter2D(img,cv2.CV_8UC3,kernel)
        filtered_img=fimg.reshape(-1)
        df[Gabor_label]=filtered_img
#        print(Gabor_label,'theta:',theta,'gamma:',gamma,'lamda;',lamda,'sigma:',sigma)
        num +=1
        
        #cv2_imshow(fimg)
#****************************************************************************
#canny edge
edges=cv2.Canny(img,100,255)
edges1=edges.reshape(-1)
df['canny']=edges1



from skimage.filters import roberts,sobel,scharr,prewitt

robert=roberts(img)
robert1=robert.reshape(-1)
df['robert']=robert1

Sobel=sobel(img)
Sobel1=Sobel.reshape(-1)
df['Sobel']=Sobel1


Scharr=scharr(img)
Scharr1=Scharr.reshape(-1)
df['Scharr']=Scharr1



Perwit=prewitt(img)
Perwit1=Perwit.reshape(-1)
df['Perwitt']=Perwit1


#Gaussian filters

from scipy import ndimage as nd
from scipy.ndimage import gaussian_filter

gaussian_image=nd.gaussian_filter(img,sigma=3)
gaussian_image1=gaussian_image.reshape(-1)
df['Gaussian s3']=gaussian_image1

#*****************************
gaussian_image2=nd.gaussian_filter(img,sigma=7)
gaussian_image3=gaussian_image2.reshape(-1)
df['Gaussian s7']=gaussian_image3


#median filter
median_img=nd.median_filter(img,size=3)
median_img1=median_img.reshape(-1)
df['median']=median_img1


labeld_image=cv2.imread('mdb001.pgm')
labeld_image=cv2.cvtColor(labeld_image,cv2.COLOR_BGR2GRAY)
labeld_image1=labeld_image.reshape(-1)
df['label']=labeld_image1

########################################

Y=df['label'].values
X=df.drop(labels=['label'],axis=1)
############################
#split data

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.4,random_state=44) 

from sklearn.ensemble import RandomForestClassifier
model=RandomForestClassifier(n_estimators=10,random_state=20)
model.fit(X_train,Y_train)


prediction_test=model.predict(X_test)

from sklearn import metrics
print('Acuracy=',metrics.accuracy_score(Y_test,prediction_test))


##Acuracy= 0.9891066707038821
